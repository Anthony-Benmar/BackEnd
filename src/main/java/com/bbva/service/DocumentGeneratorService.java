package com.bbva.service;

import com.bbva.dao.ProjectDao;
import com.bbva.dto.documentgenerator.request.*;
import com.bbva.dto.project.request.InsertProjectParticipantDTO;
import com.bbva.util.ApiJiraName;
import com.fasterxml.jackson.databind.JsonNode;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xwpf.usermodel.*;
import org.w3c.dom.*;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import static com.bbva.common.jiraValidador.JiraValidatorConstantes.ISSUES;

public class DocumentGeneratorService {
    private static final Logger log = Logger.getLogger(DocumentGeneratorService.class.getName());
    private static final String C204MESH_BASE64 = "";
    private static final String P110MESH_BASE64 = "";
    private static final String NEW = "new";
    private static final String MODIFIED = "modified";
    private static final String ELIMINATED = "eliminated";
    private static final String FOLDER = "FOLDER";
    private static final String JOB = "JOB";
    private static final String JOBNAME = "JOBNAME";
    private static final String ERROR = "ERROR DOCUMENTOSSERVICE: ";
    private static final String GIT_CHANGE_TYPE = "gitChangeType";
    private final ProjectDao projectDao;
    private final BitbucketApiService bitbucketApiService;
    private final JiraApiService jiraApiService;

    public DocumentGeneratorService(ProjectDao projectDao, BitbucketApiService bitbucketApiService, JiraApiService jiraApiService) {
        this.projectDao = projectDao;
        this.bitbucketApiService = bitbucketApiService;
        this.jiraApiService = jiraApiService;
    }

    public byte[] getDocumentBytes(String documentoBase64) {
        return Base64.getDecoder().decode(documentoBase64);
    }

    public byte[] generateDocumentMeshCases(DocumentGeneratorMeshRequest dto) {
        byte[] documentBytes = getDocumentBytes(C204MESH_BASE64);
        try {
            if (!dto.getUrl().isBlank()) {
                dto.setDataDocumentMesh(getDataDocumentMesh(dto));
            }
            List<InsertProjectParticipantDTO> projectParticipant = projectDao.getProjectParticipants(dto.getProjectId());
            List<InsertProjectParticipantDTO> smParticipant = projectParticipant.stream()
                    .filter(t -> t.getProjectRolType().equals(1) || t.getProjectRolType().equals(2))
                    .toList();
            List<InsertProjectParticipantDTO> poParticipant = projectParticipant.stream()
                    .filter(t -> t.getProjectRolType().equals(5) || t.getProjectRolType().equals(8))
                    .toList();
            Map<String, Map<String, Long>> conteoMallas = conteoMallas(dto.getDataDocumentMesh());
            Map<String, Map<String, String>> jobsDetail = buildJobsSummaryDetail(dto.getDataDocumentMesh());
            Map<String, Map<String, List<String>>> jobSummaryType = buildJobsSummaryType(dto.getDataDocumentMesh());
            List<Map.Entry<String, Map<String, String>>> listJobsDetail = new ArrayList<>(jobsDetail.entrySet());
            List<Map.Entry<String, Map<String, List<String>>>> listJobSummary = new ArrayList<>(jobSummaryType.entrySet());
            Map<String, String> descripcionMallas = descripcionMallas(conteoMallas);
            DocumentGeneratorMeshInfo mallasInfo = new DocumentGeneratorMeshInfo(smParticipant,poParticipant,listJobsDetail,listJobSummary,descripcionMallas,conteoMallas);

            XWPFDocument document = new XWPFDocument(new ByteArrayInputStream(documentBytes));
            XWPFDocument documentWrite = fillTables(document,dto,mallasInfo);
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            documentWrite.write(outputStream);
            return outputStream.toByteArray();

        } catch (Exception e) {
            log.info(ERROR + e.getMessage());
        }
        return documentBytes;
    }

    private DataDocumentMesh getDataDocumentMesh(DocumentGeneratorMeshRequest dto) throws Exception {
        String pullRequestUrl;
        if(!dto.getUrl().contains("bitbucket")){
            JsonObject jiraTicketResult = getInfoJira(dto, List.of(dto.getUrl())).getAsJsonArray(ISSUES).get(0).getAsJsonObject();
            pullRequestUrl = getPullRequestUrl(dto, jiraTicketResult);
        }
        else{
            pullRequestUrl = dto.getUrl();
        }
        DataDocumentMesh dataDocumentMesh = processDocuments(dto, pullRequestUrl);
        dto.setDataDocumentMesh(dataDocumentMesh);
        return dataDocumentMesh;
    }

    private DataDocumentMesh processDocuments(DocumentGeneratorMeshRequest dto, String pullRequestUrl) throws IOException, ParserConfigurationException, SAXException, TransformerException {
        JsonNode pullRequestChanges = bitbucketApiService.getPullRequestChanges(pullRequestUrl, dto.getUserName(),dto.getToken());
        String fromHash = pullRequestChanges.get("fromHash").asText();
        String toHash = pullRequestChanges.get("toHash").asText();
        JsonNode values = pullRequestChanges.get("values");
        DataDocumentMesh dataDocumentMesh = new DataDocumentMesh();
        List<DataDocumentMeshFolder> folderList = new ArrayList<>();
        for (JsonNode value : values) {
            List<DataDocumentMeshJobName> jobList = new ArrayList<>();
            DataDocumentMeshFolder dataDocumentMeshFolder = new DataDocumentMeshFolder();
            JsonNode path = value.get("path");
            String fileName = path.get("name").asText();
            String fullPath = path.get("toString").asText();
            JsonNode properties = value.get("properties");
            if (properties.get(GIT_CHANGE_TYPE).asText().equals("MODIFY")) {
                Document docBefore = bitbucketApiService.getPullRequestFileInfo(pullRequestUrl, dto.getUserName(), dto.getToken(), fullPath, fromHash);
                Document docAfter = bitbucketApiService.getPullRequestFileInfo(pullRequestUrl, dto.getUserName(), dto.getToken(), fullPath, toHash);
                Map<String, Element> docJobsBefore = extractJobsByName(docBefore);
                Map<String, Element> docJobsAfter = extractJobsByName(docAfter);
                dataDocumentMeshFolder.setXmlBefore(documentToString(docBefore));
                dataDocumentMeshFolder.setXmlAfter(documentToString(docAfter));
                processDifferences(docJobsBefore, docJobsAfter, jobList);
            } else if (properties.get(GIT_CHANGE_TYPE).asText().equals("ADD")) {
                Document docAfter = bitbucketApiService.getPullRequestFileInfo(pullRequestUrl, dto.getUserName(), dto.getToken(), fullPath, toHash);
                dataDocumentMeshFolder.setXmlAfter(documentToString(docAfter));
                processNewOrEliminatedMesh(docAfter, jobList, NEW);
            } else if (properties.get(GIT_CHANGE_TYPE).asText().equals("DELETE")){
                Document docBefore = bitbucketApiService.getPullRequestFileInfo(pullRequestUrl, dto.getUserName(), dto.getToken(), fullPath, fromHash);
                dataDocumentMeshFolder.setXmlBefore(documentToString(docBefore));
                processNewOrEliminatedMesh(docBefore, jobList, ELIMINATED);
            }
            dataDocumentMeshFolder.setFolderName(fileName.replace(".xml", ""));
            dataDocumentMeshFolder.setJobNames(jobList);
            folderList.add(dataDocumentMeshFolder);
        }
        dataDocumentMesh.setFolderList(folderList);

        return  dataDocumentMesh;
    }

    public static String documentToString(Document doc) throws TransformerException {
            TransformerFactory tf = TransformerFactory.newInstance();
            Transformer transformer = tf.newTransformer();
            transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "no");
            transformer.setOutputProperty(OutputKeys.METHOD, "xml");
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");

            StringWriter writer = new StringWriter();
            transformer.transform(new DOMSource(doc), new StreamResult(writer));
            return writer.toString();
    }

    private static Map<String, Element> extractJobsByName(Document doc) {
        Map<String, Element> jobsMap = new HashMap<>();
        NodeList jobs = doc.getElementsByTagName(JOB);

        for (int i = 0; i < jobs.getLength(); i++) {
            Element job = (Element) jobs.item(i);
            String jobName = job.getAttribute(JOBNAME);
            jobsMap.put(jobName, job);
        }
        return jobsMap;
    }

    private static boolean isEqualNode(Element controlJob, Element testJob) throws TransformerException {
        String controlJobText = normalizeXml(controlJob);
        String testJobText = normalizeXml(testJob);
        return controlJobText.equals(testJobText);
    }

    private static String normalizeXml(Element element) throws TransformerException {
        Transformer transformer = TransformerFactory.newInstance().newTransformer();
        transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
        transformer.setOutputProperty(OutputKeys.INDENT, "no");
        StringWriter writer = new StringWriter();
        transformer.transform(new DOMSource(element), new StreamResult(writer));
        return writer.toString().replaceAll(">\\s+<", "><").trim();
    }

    private List<String> compareXmlByLine(String xmlBefore, String xmlAfter) {
        List<String> results = new ArrayList<>();
        String[] linesBefore = xmlBefore.split("><");
        String[] linesAfter = xmlAfter.split("><");

        Set<String> setBefore = Arrays.stream(linesBefore).map(String::trim).collect(Collectors.toSet());
        Set<String> setAfter = Arrays.stream(linesAfter).map(String::trim).collect(Collectors.toSet());

        for (String line : setBefore) {
            if (!setAfter.contains(line)) {
                String diff = "- <" + line + ">";
                results.add(diff);
            }
        }
        for (String line : setAfter) {
            if (!setBefore.contains(line)) {
                String diff = "+ <" + line + ">";
                results.add(diff);
            }
        }
        return results;
    }

    private void processNewOrEliminatedMesh(Document doc, List<DataDocumentMeshJobName> jobs, String status) {
        NodeList jobNodes = doc.getElementsByTagName(JOB);
        for (int i = 0; i < jobNodes.getLength(); i++) {
            Element jobElement = (Element) jobNodes.item(i);
            String jobName = jobElement.getAttribute(JOBNAME);
            if (!jobName.isEmpty()) {
                jobs.add(new DataDocumentMeshJobName(jobName, status));
            }
        }
    }

    private void processDifferences(Map<String, Element> docJobsBefore, Map<String, Element> docJobsAfter,
                                    List<DataDocumentMeshJobName> jobList) throws TransformerException {
        for (Map.Entry<String, Element> entry : docJobsBefore.entrySet()) {
            String jobName = entry.getKey();
            if (!docJobsAfter.containsKey(jobName)) {
                jobList.add(new DataDocumentMeshJobName(jobName, ELIMINATED));
            }
        }
        for (Map.Entry<String, Element> entry : docJobsAfter.entrySet()) {
            String jobName = entry.getKey();
            Element afterJob = entry.getValue();
            Element beforeJob = docJobsBefore.get(jobName);

            if (beforeJob == null) {
                jobList.add(new DataDocumentMeshJobName(jobName, NEW));
            } else if (!isEqualNode(beforeJob, afterJob)) {
                jobList.add(new DataDocumentMeshJobName(jobName, MODIFIED));
            }
        }
    }

    private XWPFDocument fillTables(XWPFDocument document, DocumentGeneratorMeshRequest dto, DocumentGeneratorMeshInfo mallasInfo) {
        for (XWPFTable table : document.getTables()) {
            fillRows(table, dto, mallasInfo);
        }

        int fixedTables = 3;
        int totalTables = document.getTables().size();
        int dynamicTablesTotal = totalTables - fixedTables;
        int requiredDynamicTables = mallasInfo.getMeshCount().size();

        if (requiredDynamicTables < dynamicTablesTotal) {
            List<XWPFTable> allTables = new ArrayList<>(document.getTables());
            for (int i = fixedTables + requiredDynamicTables; i < allTables.size(); i++) {
                XWPFTable tableToRemove = allTables.get(i);
                int pos = document.getPosOfTable(tableToRemove);
                document.removeBodyElement(pos);
            }
        }
        return document;
    }

    private void fillRows(XWPFTable table, DocumentGeneratorMeshRequest dto, DocumentGeneratorMeshInfo mallasInfo) {
        for (XWPFTableRow row : table.getRows()) {
            fillCells(row,dto,mallasInfo);
        }
    }

    private void fillCells(XWPFTableRow row, DocumentGeneratorMeshRequest dto, DocumentGeneratorMeshInfo mallasInfo) {
        for (XWPFTableCell cell : row.getTableCells()) {
            fillParagraphs(cell,dto,mallasInfo);
        }
    }

    private void fillParagraphs(XWPFTableCell cell, DocumentGeneratorMeshRequest dto, DocumentGeneratorMeshInfo mallasInfo) {
        for (XWPFParagraph paragraph : cell.getParagraphs()) {
            for (XWPFRun run : paragraph.getRuns()) {
                String texto = run.getText(0);
                if (texto != null) {
                    texto = fillDocx(dto, texto, mallasInfo);
                    texto = fillCases(texto, mallasInfo);
                    splitAndSetText(texto, run);
                }
            }
        }
    }

    private void splitAndSetText(String texto, XWPFRun run) {
        if (texto.contains("\n")) {
            String[] lines = texto.split("\n");
            run.setText(lines[0], 0);
            for (int i = 1; i < lines.length; i++) {
                run.addBreak();
                run.setText(lines[i]);
            }
        } else {
            run.setText(texto, 0);
        }
    }

    private String fillDocx(DocumentGeneratorMeshRequest dto, String texto, DocumentGeneratorMeshInfo mallasInfo){
        String sm = mallasInfo.getSmParticipant().isEmpty() ? "" : mallasInfo.getSmParticipant().get(0).getParticipantName();
        String po = mallasInfo.getPoParticipant().isEmpty() ? "" : mallasInfo.getPoParticipant().get(0).getParticipantName();
        long totalMallasJobs = mallasInfo.getMeshCount().values().stream()
                .flatMap(innerMap -> innerMap.values().stream())
                .mapToLong(Long::longValue)
                .sum();

        Map<String, String> reemplazos = new HashMap<>();
        reemplazos.put("$AMBIENTE", "Work");
        reemplazos.put("$SDATOOLCODIGO", dto.getSdatool());
        reemplazos.put("$SDATOOLTITULO", dto.getProjectDescription());
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        reemplazos.put("$FECHA", LocalDate.now().format(formatter));
        reemplazos.put("$DESARROLLADOR", dto.getName() + " - " + dto.getEmployeeId());
        reemplazos.put("$MALLASTOTALCANTIDAD", String.valueOf(mallasInfo.getMeshCount().size()));
        reemplazos.put("$SM", sm);
        reemplazos.put("$PO", po);
        reemplazos.put("$MALLASJOBSTOTALCANTIDAD", String.valueOf(totalMallasJobs));
        reemplazos.putAll(mallasInfo.getMeshDescription());

        for (Map.Entry<String, String> entry : reemplazos.entrySet()) {
            texto = texto.replace(entry.getKey(), entry.getValue());
        }

        return texto;
    }

    private String fillCases (String texto, DocumentGeneratorMeshInfo mallasInfo) {
        for (int i = 1; i <= 5; i++) {
            String summary = "";
            if (i <= mallasInfo.getListJobSummary().size()) {
                Map.Entry<String, Map<String, List<String>>> entry = mallasInfo.getListJobSummary().get(i - 1);

                summary = formatJobSummary(entry.getValue());
            }
            texto = texto.replace("$MALLASJOBS" + i, summary);
            StringBuilder finalSummary = new StringBuilder();
            if (i <= mallasInfo.getListJobsDetail().size()) {
                Map.Entry<String, Map<String, String>> entry = mallasInfo.getListJobsDetail().get(i - 1);
                String folder = entry.getKey();
                finalSummary.append("Folder: ").append(folder).append("\n");
                for (Map.Entry<String, String> jobEntry : entry.getValue().entrySet()) {

                    finalSummary.append(jobEntry.getValue())
                            .append("\n\n");
                }
            }
            texto = texto.replace("$MALLASJOBSDETALLE" + i, finalSummary.toString());
        }
        return texto;
    }

    private Map<String, Map<String, Long>>  conteoMallas (DataDocumentMesh dataDocumentMesh){
        Map<String, Map<String, Long>> result = new HashMap<>();
        for (DataDocumentMeshFolder folder : dataDocumentMesh.getFolderList()) {
            String folderName = folder.getFolderName();
            Map<String, Long> stateCount = folder.getJobNames().stream()
                    .collect(Collectors.groupingBy(DataDocumentMeshJobName::getStatus, Collectors.counting()));
            result.put(folderName, stateCount);
        }
        return result;
    }

    private Map<String, String> descripcionMallas(Map<String, Map<String, Long>> conteoMallas){
        List<Map.Entry<String, Map<String, Long>>> folderList = new ArrayList<>(conteoMallas.entrySet());
        Map<String, String> placeholders = new HashMap<>();

        for (int i = 1; i <= 5; i++) {
            if (i <= folderList.size()) {
                String folderName = folderList.get(i - 1).getKey();
                Map<String, Long> innerMap = folderList.get(i - 1).getValue();
                long newJobs = innerMap.getOrDefault(NEW, 0L);
                long modifiedJobs = innerMap.getOrDefault(MODIFIED, 0L);
                long eliminatedJobs = innerMap.getOrDefault(ELIMINATED, 0L);
                String summary = "Nuevos: " + newJobs + " jobs\n" +
                        "Modificados: " + modifiedJobs + " jobs\n" +
                        "Eliminados: " + eliminatedJobs + " jobs";
                placeholders.put("$MALLASDESCRIPCION" + i, "Se actualiza la malla: " + folderName);
                placeholders.put("$MALLASJOBSRESUMEN" + i, summary);
            } else {
                placeholders.put("$MALLASDESCRIPCION" + i, "");
                placeholders.put("$MALLASJOBSRESUMEN" + i, "");
            }
        }
        return  placeholders;
    }

    private Map<String, Map<String, String>> parseXml(String xml) {
        Map<String, Map<String, String>> result = new HashMap<>();
        try {
            Document doc = getDocumentXML(xml);
            assert doc != null;
            NodeList folderNodes = doc.getElementsByTagName(FOLDER);
            for (int i = 0; i < folderNodes.getLength(); i++) {
                Element folderElement = (Element) folderNodes.item(i);
                String folderName = folderElement.getAttribute("FOLDER_NAME");
                Map<String, String> jobsMap = getJobsMap(folderElement);
                result.put(folderName, jobsMap);
            }
        } catch (Exception e) {
            log.info(ERROR + e.getMessage());
        }
        return result;
    }

    private Map<String, String> getJobsMap(Element folderElement) {
        Map<String, String> jobsMap = new HashMap<>();

        NodeList jobNodes = folderElement.getElementsByTagName(JOB);
        for (int j = 0; j < jobNodes.getLength(); j++) {
            Element jobElement = (Element) jobNodes.item(j);
            String jobName = jobElement.getAttribute(JOBNAME);
            NodeList variableNodes = jobElement.getElementsByTagName("VARIABLE");
            for (int k = 0; k < variableNodes.getLength(); k++) {
                Element variableElement = (Element) variableNodes.item(k);
                String value= "";
                if ("%%SENTRY_PARM".equals(variableElement.getAttribute("NAME"))) {
                    value = variableElement.getAttribute("VALUE");
                }
                jobsMap.put(jobName, value);
            }
        }
        return jobsMap;
    }

    public Document getDocumentXML(String xml) {
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setIgnoringElementContentWhitespace(true);
            factory.setNamespaceAware(true);
            factory.setValidating(false);
            factory.setFeature("http://xml.org/sax/features/external-general-entities", false);
            factory.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
            factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
            DocumentBuilder builder = factory.newDocumentBuilder();
            return builder.parse(new InputSource(new StringReader(xml)));
        } catch (Exception e) {
            log.info(ERROR + e.getMessage());
        }
        return null;
    }

    private Map<String, Map<String, String>> buildJobsSummaryDetail(DataDocumentMesh dataDocumentMesh) {
        Map<String, Map<String, String>> summaryMap = new HashMap<>();

        for (DataDocumentMeshFolder folderDto : dataDocumentMesh.getFolderList()) {
            Map<String, Map<String, String>> parsedResult = parseXml(folderDto.getXmlAfter());
            String folderName = folderDto.getFolderName();
            Map<String, String> jobSummaryMap = new LinkedHashMap<>();
            Map<String, String> xmlJobs = parsedResult.get(folderName);

            if (xmlJobs != null) {
                List<DataDocumentMeshJobName> sortedJobs = folderDto.getJobNames().stream()
                        .filter(jobDto -> xmlJobs.containsKey(jobDto.getJobName()))
                        .sorted((job1, job2) -> {

                            List<String> order = Arrays.asList(NEW, MODIFIED, ELIMINATED);
                            String state1 = job1.getStatus().toLowerCase();
                            String state2 = job2.getStatus().toLowerCase();
                            int index1 = order.indexOf(state1);
                            int index2 = order.indexOf(state2);
                            return Integer.compare(index1, index2);
                        })
                        .toList();
                for (DataDocumentMeshJobName jobDto : sortedJobs) {
                    String jobName = jobDto.getJobName();
                    String sentryParam = xmlJobs.get(jobName);
                    String summary = jobName + "\n" + sentryParam;
                    jobSummaryMap.put(jobName, summary);
                }
            }

            summaryMap.put(folderName, jobSummaryMap);
        }

        return summaryMap;
    }

    private  Map<String, Map<String, List<String>>> buildJobsSummaryType(DataDocumentMesh dataDocumentMesh) {
        Map<String, Map<String, List<String>>> result = new HashMap<>();
        for (DataDocumentMeshFolder folder : dataDocumentMesh.getFolderList()) {
            String folderName = folder.getFolderName();
            Map<String, List<String>> stateMap = new HashMap<>();
            stateMap.put(NEW, new ArrayList<>());
            stateMap.put(MODIFIED, new ArrayList<>());
            stateMap.put(ELIMINATED, new ArrayList<>());

            for (DataDocumentMeshJobName job : folder.getJobNames()) {
                String state = job.getStatus();
                if (stateMap.containsKey(state)) {
                    stateMap.get(state).add(job.getJobName());
                }
            }
            result.put(folderName, stateMap);
        }
        return result;
    }

    public String formatJobSummary(Map<String, List<String>> folderSummary) {
        StringBuilder sb = new StringBuilder();
        List<String> newJobs = folderSummary.getOrDefault(NEW, Collections.emptyList());
        List<String> modifiedJobs = folderSummary.getOrDefault(MODIFIED, Collections.emptyList());
        List<String> eliminatedJobs = folderSummary.getOrDefault(ELIMINATED, Collections.emptyList());

        sb.append("Nuevos Jobs:\n");
        for (String job : newJobs) {
            sb.append(job).append("\n");
        }

        sb.append("\nModificados Jobs:\n");
        for (String job : modifiedJobs) {
            sb.append(job).append("\n");
        }

        sb.append("\nEliminados Jobs:\n");
        for (String job : eliminatedJobs) {
            sb.append(job).append("\n");
        }

        return sb.toString().trim();
    }

    public String generateNameMeshCases(DocumentGeneratorMeshRequest dto){
        StringJoiner joiner = new StringJoiner(", ");
        for (DataDocumentMeshFolder folder : dto.getDataDocumentMesh().getFolderList()) {
            joiner.add(folder.getFolderName());
        }
        return joiner.toString();
    }

    public byte[] generateDocumentMeshTracking(DocumentGeneratorMeshRequest dto){
        byte[] documentoBytes = getDocumentBytes(P110MESH_BASE64);
        try {
            if (!dto.getUrl().isBlank()) {
                dto.setDataDocumentMesh(getDataDocumentMesh(dto));
            }
            List<InsertProjectParticipantDTO> projectParticipant = projectDao.getProjectParticipants(dto.getProjectId());
            List<InsertProjectParticipantDTO> smParticipant = projectParticipant.stream()
                    .filter(t -> t.getProjectRolType().equals(1) || t.getProjectRolType().equals(2))
                    .toList();
            ByteArrayInputStream inputStream = new ByteArrayInputStream(documentoBytes);
            Workbook workbook = new XSSFWorkbook(inputStream);
            Sheet sheet = workbook.getSheetAt(0);
            int rowStart = 1;
            int columnStart = 0;

            for(int i = 0; i < dto.getDataDocumentMesh().getFolderList().size(); i++){
                Document docAfter = getDocumentXML(dto.getDataDocumentMesh().getFolderList().get(i).getXmlAfter());
                Document docBefore = getDocumentXML(dto.getDataDocumentMesh().getFolderList().get(i).getXmlBefore());
                for(int j = 0; j < dto.getDataDocumentMesh().getFolderList().get(i).getJobNames().size(); j++){
                    String jobName = dto.getDataDocumentMesh().getFolderList().get(i).getJobNames()
                            .get(j).getJobName();
                    String jobNameStatus = dto.getDataDocumentMesh().getFolderList().get(i).getJobNames()
                            .get(j).getStatus();
                    Document doc = jobNameStatus.equalsIgnoreCase(ELIMINATED) ? docBefore : docAfter;
                    assert doc != null;
                    Element jobNode = getJobNode(jobName, doc);

                    Row row = sheet.getRow(rowStart + i);
                    Cell uuaa = row.getCell(columnStart);
                    uuaa.setCellValue(getUUAA(jobNode));
                    Cell jobNameDatio = row.getCell(columnStart + 1);
                    jobNameDatio.setCellValue(jobName);
                    Cell jobNameDataproc = row.getCell(columnStart + 2);
                    jobNameDataproc.setCellValue(getJobDataproc(jobNode));
                    Cell folder = row.getCell(columnStart+3);
                    folder.setCellValue(dto.getDataDocumentMesh().getFolderList().get(i).getFolderName());
                    Cell sdaTool = row.getCell(columnStart + 6);
                    sdaTool.setCellValue(dto.getSdatool()+" - "+dto.getProjectDescription());
                    Cell tableroBacklog = row.getCell(columnStart + 7);
                    tableroBacklog.setCellValue(dto.getTeamBacklogName());
                    Cell sm = row.getCell(columnStart + 8);
                    sm.setCellValue(smParticipant.isEmpty() ? "" : smParticipant.get(0).getParticipantName());
                    Cell dev = row.getCell(columnStart + 9);
                    dev.setCellValue(dto.getEmployeeId());
                    Cell jobType = row.getCell(columnStart + 10);
                    jobType.setCellValue(typeClasificationJobs(uuaa.getStringCellValue(),jobName,jobNameDataproc.getStringCellValue()));
                    Cell modifiedDetail = row.getCell(columnStart+12);
                    modifiedDetail.setCellValue(getModificationDetail(jobNameStatus, jobName, docBefore, docAfter));
                    jobNameStatus = getStatus(jobNameStatus);
                    jobNameStatus = jobNameStatus.substring(0, 1).toUpperCase() + jobNameStatus.substring(1).toLowerCase();
                    Cell jobStatus = row.getCell(columnStart + 11);
                    jobStatus.setCellValue(getStatus(jobNameStatus));
                    Cell masterObject = row.getCell(columnStart+14);
                    masterObject.setCellValue(getTableName(jobNode));
                    rowStart++;
                }
            }

            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            workbook.write(outputStream);
            workbook.close();

            return outputStream.toByteArray();
        } catch (Exception e) {
            log.info(ERROR + e);
        }
        return documentoBytes;
    }

    private String getModificationDetail(String jobNameStatus, String jobName, Document docBefore, Document docAfter) throws TransformerException {
        String modification = "";
        if (jobNameStatus.equalsIgnoreCase(MODIFIED) && docBefore != null) {
            modification = getDifference(jobName, docBefore, docAfter);
        }
        return modification;
    }

    private String getDifference(String jobName, Document docBefore, Document docAfter) throws TransformerException {
        Element jobBefore = getJobNode(jobName, docBefore);
        Element jobAfter = getJobNode(jobName, docAfter);
        return String.join("\n",compareXmlByLine(normalizeXml(jobBefore),normalizeXml(jobAfter)));
    }

    private Element getJobNode(String jobName, Document doc) {
        Element jobElement = null;
        NodeList folderNodes = doc.getElementsByTagName(FOLDER);
        for (int i = 0; i < folderNodes.getLength(); i++) {
            Element folderElement = (Element) folderNodes.item(i);
            NodeList jobNodes = folderElement.getElementsByTagName(JOB);
            for (int j = 0; j < jobNodes.getLength(); j++) {
                jobElement = (Element) jobNodes.item(j);
                if (jobElement.getAttribute(JOBNAME).equals(jobName)) {
                    return jobElement;
                }
            }
        }
        return jobElement;
    }

    private String getTableName(Element jobElement) {
        String description = jobElement.getAttribute("DESCRIPTION");
        Pattern pattern = Pattern.compile("\\b(t_\\w+)\\b");
        Matcher matcher = pattern.matcher(description);
        return matcher.find() ? matcher.group(1) : "";
    }

    private String getUUAA (Element jobElement){
        String uuaaApplication;
        uuaaApplication = jobElement.getAttribute("APPLICATION").split("-")[0];
        if (uuaaApplication.length() == 3){
            return "P" + uuaaApplication;
        }
        return uuaaApplication;
    }

    private String getJobDataproc (Element jobElement){
        String jobDataproc = "";
        NodeList variableNodes = jobElement.getElementsByTagName("VARIABLE");
        for (int k = 0; k < variableNodes.getLength(); k++) {
            Element variableElement = (Element) variableNodes.item(k);
            String value;
            if ("%%SENTRY_JOB".equals(variableElement.getAttribute("NAME"))) {
                value = variableElement.getAttribute("VALUE");
                jobDataproc = getJobNameDataproc(value);
            }
        }
        return jobDataproc;
    }

    public String getStatus(String status){
        Map<String, String> translations = new HashMap<>();
        translations.put(NEW, "nuevo");
        translations.put(MODIFIED, "modificado");
        translations.put(ELIMINATED, "eliminado");
        return translations.getOrDefault(status.toLowerCase(), status);
    }

    public String getJobNameDataproc(String texto) {
        Pattern pattern = Pattern.compile("\\b[\\w-]*-([\\w-]*-){4}[\\w-]*\\b");
        Matcher matcher = pattern.matcher(texto);
        if (matcher.find()) {
            return matcher.group();
        }
        return "";
    }

    private String typeClasificationJobs(String uuaa, String jobName, String jobNameDataproc) {
        int jobGlobal = uuaa.startsWith("P") ? 0 : 1;
        String jobNameType = extractJobNameType(jobName, jobGlobal);

        return switch (jobNameType) {
            case "C" -> classifyDataprocJob(jobNameDataproc);
            case "V" -> "Calidad";
            case "T" -> "Transmisión (CONNECT_DIRECT, DATAX)";
            case "W" -> "Filewatcher (ctmfw, epsilon-watch)";
            case "D" -> "HDFS (LS, CP, MV, RM)";
            default -> "Dummy (Bifurcador, Timer, Activador)";
        };
    }

    private String extractJobNameType(String jobName, int jobGlobal) {
        return jobName.substring(4 + jobGlobal, 5 + jobGlobal);
    }

    private String classifyDataprocJob(String jobNameDataproc) {
        String proc = "Procesamiento";
        if (jobNameDataproc.isEmpty()) {
            return proc;
        }
        String[] parts = jobNameDataproc.split("-");
        if (parts.length > 3) {
            String jobType = parts[2];
            String operation = parts[3];
            if ("krb".equals(jobType)) {
                return "Ingesta";
            }
            return "out".equals(operation) ? "Operativización" : proc;
        }
        return proc;
    }

    public String generateNameMeshTracking(DocumentGeneratorMeshRequest dto) {
        final Map<String, String> periodicidadMap = new HashMap<>();
        periodicidadMap.put("DIA", "Diaria");
        periodicidadMap.put("SEM", "Semanal");
        periodicidadMap.put("MEN", "Mensual");
        periodicidadMap.put("ANU", "Anual");
        periodicidadMap.put("EVE", "Eventual");
        Set<String> periodicidadSet = new HashSet<>();
        Set<String> uuaaSet = new HashSet<>();
        for(DataDocumentMeshFolder folders : dto.getDataDocumentMesh().getFolderList()){
            String folder = folders.getFolderName();
            String[] partesFolder = folder.split("-");
            String uuaaFolder;
            String periodicidadFolder;
            if(folder.length() == 15){
                uuaaFolder = "P" + partesFolder[1].substring(2, 5);
                periodicidadFolder = partesFolder[1].substring(5, 8);
            }
            else {
                uuaaFolder = partesFolder[1].substring(2, 6);
                periodicidadFolder = partesFolder[1].substring(6, 9);
            }
            String periodicidadEquivalente = periodicidadMap.getOrDefault(periodicidadFolder, periodicidadFolder);
            periodicidadSet.add(periodicidadEquivalente);
            uuaaSet.add(uuaaFolder);
        }
        return String.join("_", uuaaSet) + "_" + String.join("_", periodicidadSet);
    }

    public JsonObject getInfoJira(DocumentGeneratorMeshRequest dto, List<String> jiraIssues) throws Exception {
        String url = jiraApiService.buildJiraQueryUrl(jiraIssues);
        String response = jiraApiService.GetJiraAsync(dto.getUserName(), dto.getToken(), url);
        return JsonParser.parseString(response).getAsJsonObject();
    }

    public String getPullRequestUrl(DocumentGeneratorMeshRequest dto, JsonObject jiraTicketResult) throws Exception {
        String idTicket = jiraTicketResult.getAsJsonObject().get("id").getAsString();
        String url = ApiJiraName.URL_API_JIRA_PULL_REQUEST + idTicket + "&applicationType=stash&dataType=pullrequest";
        String response = this.jiraApiService.GetJiraAsync(dto.getUserName(), dto.getToken(), url);
        JsonObject prsJsonResponse = JsonParser.parseString(response).getAsJsonObject();
        return prsJsonResponse
                .getAsJsonArray("detail").get(0).getAsJsonObject()
                .getAsJsonArray("pullRequests").get(0).getAsJsonObject()
                .get("url").getAsString();
    }

}
